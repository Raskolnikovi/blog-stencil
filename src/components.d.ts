/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@stencil/router';
import '@stencil/state-tunnel';
import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';


export namespace Components {

  interface AddArticle {
    'history': RouterHistory;
  }
  interface AddArticleAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
  }

  interface AppArticle {
    'history': RouterHistory;
    'match': MatchResults;
  }
  interface AppArticleAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
    'match'?: MatchResults;
  }

  interface AppArticles {
    'history': RouterHistory;
  }
  interface AppArticlesAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
  }

  interface AppDeleteArticle {
    'history': RouterHistory;
    'match': MatchResults;
  }
  interface AppDeleteArticleAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
    'match'?: MatchResults;
  }

  interface EditArticle {
    'history': RouterHistory;
    'match': MatchResults;
  }
  interface EditArticleAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
    'match'?: MatchResults;
  }

  interface AppHome {
    'message': string;
  }
  interface AppHomeAttributes extends StencilHTMLAttributes {
    'message'?: string;
  }

  interface AppProfile {
    'match': MatchResults;
  }
  interface AppProfileAttributes extends StencilHTMLAttributes {
    'match'?: MatchResults;
  }

  interface AppRoot {}
  interface AppRootAttributes extends StencilHTMLAttributes {}

  interface StFetch {
    'buttonLabel': string;
    'headers': Headers;
    'makeRequest': () => void;
    'method': string;
    'url': string;
  }
  interface StFetchAttributes extends StencilHTMLAttributes {
    'buttonLabel'?: string;
    'headers'?: Headers;
    'method'?: string;
    'onError'?: (event: CustomEvent) => void;
    'onResolved'?: (event: CustomEvent) => void;
    'url'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'AddArticle': Components.AddArticle;
    'AppArticle': Components.AppArticle;
    'AppArticles': Components.AppArticles;
    'AppDeleteArticle': Components.AppDeleteArticle;
    'EditArticle': Components.EditArticle;
    'AppHome': Components.AppHome;
    'AppProfile': Components.AppProfile;
    'AppRoot': Components.AppRoot;
    'StFetch': Components.StFetch;
  }

  interface StencilIntrinsicElements {
    'add-article': Components.AddArticleAttributes;
    'app-article': Components.AppArticleAttributes;
    'app-articles': Components.AppArticlesAttributes;
    'app-delete-article': Components.AppDeleteArticleAttributes;
    'edit-article': Components.EditArticleAttributes;
    'app-home': Components.AppHomeAttributes;
    'app-profile': Components.AppProfileAttributes;
    'app-root': Components.AppRootAttributes;
    'st-fetch': Components.StFetchAttributes;
  }


  interface HTMLAddArticleElement extends Components.AddArticle, HTMLStencilElement {}
  var HTMLAddArticleElement: {
    prototype: HTMLAddArticleElement;
    new (): HTMLAddArticleElement;
  };

  interface HTMLAppArticleElement extends Components.AppArticle, HTMLStencilElement {}
  var HTMLAppArticleElement: {
    prototype: HTMLAppArticleElement;
    new (): HTMLAppArticleElement;
  };

  interface HTMLAppArticlesElement extends Components.AppArticles, HTMLStencilElement {}
  var HTMLAppArticlesElement: {
    prototype: HTMLAppArticlesElement;
    new (): HTMLAppArticlesElement;
  };

  interface HTMLAppDeleteArticleElement extends Components.AppDeleteArticle, HTMLStencilElement {}
  var HTMLAppDeleteArticleElement: {
    prototype: HTMLAppDeleteArticleElement;
    new (): HTMLAppDeleteArticleElement;
  };

  interface HTMLEditArticleElement extends Components.EditArticle, HTMLStencilElement {}
  var HTMLEditArticleElement: {
    prototype: HTMLEditArticleElement;
    new (): HTMLEditArticleElement;
  };

  interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {}
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };

  interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {}
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLStFetchElement extends Components.StFetch, HTMLStencilElement {}
  var HTMLStFetchElement: {
    prototype: HTMLStFetchElement;
    new (): HTMLStFetchElement;
  };

  interface HTMLElementTagNameMap {
    'add-article': HTMLAddArticleElement
    'app-article': HTMLAppArticleElement
    'app-articles': HTMLAppArticlesElement
    'app-delete-article': HTMLAppDeleteArticleElement
    'edit-article': HTMLEditArticleElement
    'app-home': HTMLAppHomeElement
    'app-profile': HTMLAppProfileElement
    'app-root': HTMLAppRootElement
    'st-fetch': HTMLStFetchElement
  }

  interface ElementTagNameMap {
    'add-article': HTMLAddArticleElement;
    'app-article': HTMLAppArticleElement;
    'app-articles': HTMLAppArticlesElement;
    'app-delete-article': HTMLAppDeleteArticleElement;
    'edit-article': HTMLEditArticleElement;
    'app-home': HTMLAppHomeElement;
    'app-profile': HTMLAppProfileElement;
    'app-root': HTMLAppRootElement;
    'st-fetch': HTMLStFetchElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
